{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "<%= props.shared.resourceName %>",

  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": { "default": "Provision: Source Files Configuration" },
          "Parameters": [
            "pS3",
            "pSourceFolder",
            "pPackageName"
          ]
        },
        {
          "Label": { "default": "Shared Settings: Encoding and Packaging Configuration" },
          "Parameters": [
            "pGopSizeInSec",
            "pGopPerSegment",
            "pSegmentPerPlaylist"
          ]
        },
        {
          "Label": { "default": "MediaLive: Channel Configuration" },
          "Parameters": [
            "pInputSecurityGroup",
            "pIngestType",
            "pEncodingProfile",
            "pGopSizeInSec",
            "pGopPerSegment",
            "pStartChannel"
          ]
        },
        {
          "Label": { "default": "MediaPackage: Channel Configuration" },
          "Parameters": [
            "pEndpoints",
            "pStartOverWindow"
          ]
        },
        {
          "Label": { "default": "MediaStore: Container Configuration" },
          "Parameters": [
            "pEnableMediaStore"
          ]
        },
        {
          "Label": { "default": "CloudFront: Distribution Configuration" },
          "Parameters": [
            "pEnableDistribution",
            "pPriceClass",
            "pS3CF",
            "pS3PrefixCF"
          ]
        }
      ],
      "ParameterLabels": {
        "pS3": {
          "default": "S3 Bucket Name"
        },

        "pSourceFolder": {
          "default": "Source Folder"
        },

        "pPackageName": {
          "default": "Lambda Package Name"
        },

        "pGopSizeInSec": {
          "default": "GOP Size"
        },

        "pGopPerSegment": {
          "default": "GOP(s) Per Segment"
        },

        "pSegmentPerPlaylist": {
          "default": "Segment(s) Per Playlist"
        },

        "pInputSecurityGroup": {
          "default": "Input Security Group"
        },

        "pIngestType": {
          "default": "Ingest Type"
        },

        "pEncodingProfile": {
          "default": "Encoding Profile"
        },

        "pStartChannel": {
          "default": "Auto-start"
        },

        "pEndpoints": {
          "default": "Packaging Type(s)"
        },

        "pStartOverWindow": {
          "default": "Content Window (in seconds)"
        },

        "pEnableMediaStore": {
          "default": "Enable MediaStore?"
        },

        "pEnableDistribution": {
          "default": "Create distribution?"
        },

        "pPriceClass": {
          "default": "Price Class"
        },

        "pS3CF": {
          "default": "S3 Bucket for logs"
        },

        "pS3PrefixCF": {
          "default": "S3 Prefix (Folder) for logs"
        }
      }
    }
  },

  "Resources": {
    "rMP": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Sub": "https://s3.amazonaws.com/${pS3}/${pSourceFolder}/mediapackage.template"
        },
        "Parameters": {
          "pS3": {
            "Ref": "pS3"
          },

          "pSourceFolder": {
            "Ref": "pSourceFolder"
          },

          "pPackageName": {
            "Ref": "pPackageName"
          },

          "pProvisionLambdaHandler": "orchestration.MediaPackageChannel",

          "pChannelId": {
            "Fn::Sub": "<%= props.shared.resourceName %>"
          },

          "pIngestType": "hls",

          "pEndpoints": {
            "Fn::Join": [ ",", { "Ref": "pEndpoints" } ]
          },

          "pStartOverWindow": {
            "Ref": "pStartOverWindow"
          },

          "pGopSizeInSec": {
            "Ref": "pGopSizeInSec"
          },

          "pGopPerSegment": {
            "Ref": "pGopPerSegment"
          },

          "pSegmentPerPlaylist": {
            "Ref": "pSegmentPerPlaylist"
          }
        }
      }
    },

    "rML": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Sub": "https://s3.amazonaws.com/${pS3}/${pSourceFolder}/medialive.template"
        },
        "Parameters": {
          "pS3": {
            "Ref": "pS3"
          },

          "pSourceFolder": {
            "Ref": "pSourceFolder"
          },

          "pPackageName": {
            "Ref": "pPackageName"
          },

          "pProvisionLambdaHandler": "orchestration.MediaLiveChannel",

          "pChannelId": {
            "Fn::Sub": "<%= props.shared.resourceName %>"
          },

          "pInputSecurityGroup": {
            "Fn::Join": [ ",", { "Ref": "pInputSecurityGroup" } ]
          },

          "pIngestType": {
            "Ref": "pIngestType"
          },

          "pEncodingProfile": {
            "Ref": "pEncodingProfile"
          },

          "pGopSizeInSec": {
            "Ref": "pGopSizeInSec"
          },

          "pGopPerSegment": {
            "Ref": "pGopPerSegment"
          },

          "pSegmentPerPlaylist": {
            "Ref": "pSegmentPerPlaylist"
          },

          "pStartChannel": {
            "Ref": "pStartChannel"
          },

          "pEndpointUrls": {
            "Fn::GetAtt": [ "rMP", "Outputs.oIngestUrls" ]
          },

          "pUsernames": {
            "Fn::GetAtt": [ "rMP", "Outputs.oUsers" ]
          },

          "pParameterStoreKeys": {
            "Fn::GetAtt": [ "rMP", "Outputs.oParameterStoreKeys" ]
          },

          "pMediaStoreEndpoint": {
            "Fn::If": [
              "cEnableMediaStore",
              { "Fn::GetAtt": [ "rMS", "Outputs.oContainerEndpoint" ] },
              ""
            ]
          }
        }
      }
    },

    "rMS": {
      "Condition": "cEnableMediaStore",
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Sub": "https://s3.amazonaws.com/${pS3}/${pSourceFolder}/mediastore.template"
        },
        "Parameters": {
          "pS3": {
            "Ref": "pS3"
          },

          "pSourceFolder": {
            "Ref": "pSourceFolder"
          },

          "pPackageName": {
            "Ref": "pPackageName"
          },

          "pProvisionLambdaHandler": "orchestration.MediaStoreContainer",

          "pContainerName": {
            "Fn::Sub": "<%= props.shared.resourceName %>"
          }
        }
      }
    },

    "rDistribution": {
      "Condition": "cEnableDistribution",
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Sub": "https://s3.amazonaws.com/${pS3}/${pSourceFolder}/cloudfront-distribution.template"
        },
        "Parameters": {
          "pS3": {
            "Ref": "pS3"
          },

          "pSourceFolder": {
            "Ref": "pSourceFolder"
          },

          "pPackageName": {
            "Ref": "pPackageName"
          },

          "pProvisionLambdaHandler": "orchestration.UpdateDistribution",

          "pOrigin": {
            "Fn::GetAtt": [ "rMP", "Outputs.oDomainEndpoint" ]
          },

          "pChannelId": {
            "Fn::Sub": "<%= props.shared.resourceName %>"
          },

          "pPriceClass": {
            "Ref": "pPriceClass"
          },

          "pS3CF": {
            "Fn::If": [
              "cS3CF", { "Fn::Sub": "${pS3CF}" }, { "Fn::Sub": "${pS3}" }
            ]
          },

          "pS3PrefixCF": {
            "Ref": "pS3PrefixCF"
          },

          "pPrimaryHlsUrl": {
            "Fn::GetAtt": [ "rMP", "Outputs.oHlsEndpoint" ]
          },

          "pPrimaryDashUrl": {
            "Fn::GetAtt": [ "rMP", "Outputs.oDashEndpoint" ]
          },

          "pPrimaryMssUrl": {
            "Fn::GetAtt": [ "rMP", "Outputs.oMssEndpoint" ]
          },

          "pPrimaryCmafUrl": {
            "Fn::GetAtt": [ "rMP", "Outputs.oCmafEndpoint" ]
          }
        }
      }
    }
  },

  "Parameters": {
    "pS3": {
      "Type": "String",
      "Description": "store template and lambda package",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9-_]*",
      "Default": "<%= props.shared.bucket %>"
    },

    "pSourceFolder": {
      "Type": "String",
      "Description": "store template and lambda package",
      "Default": "src"
    },

    "pPackageName": {
      "Type": "String",
      "Description": "lambda package zip file",
      "Default": "psdemo-js-live-workflow_v0.3.0.zip"
    },

    "pInputSecurityGroup": {
      "Type": "CommaDelimitedList",
      "Description": "comma delimited CIDR list. ie., 10.1.0.0/16,10.2.0.0/16",
      "Default": "<%= props.mediaLive.securityGroup %>"
    },

    "pIngestType": {
      "Type": "String",
      "Description": "medialive ingest type",
      "AllowedValues": [ "RTP_PUSH", "UDP_PUSH", "RTMP_PUSH" ],
      "Default": "<%= props.mediaLive.ingestType %>"
    },

    "pEncodingProfile": {
      "Type": "String",
      "Description": "FULL (6 renditions), MOBILE (3 renditions), HD (single 1080p), SD (single 432p)",
      "Default": "<%= props.mediaLive.encodingProfile %>",
      "AllowedValues": [ "FULL", "MOBILE", "HD", "SD" ]
    },

    "pGopSizeInSec": {
      "Type": "Number",
      "Description": "specify GOP size in seconds. Use 1s to force IP-frame encode for low-latency.",
      "Default": "<%= props.shared.gopSize %>",
      "MinValue": "1"
    },

    "pGopPerSegment": {
      "Type": "Number",
      "Description": "specify number of GOPs per segment. Use 1 for low-latency.",
      "Default": "<%= props.shared.gopPerSegment %>",
      "MinValue": "1"
    },

    "pStartChannel": {
      "Type": "String",
      "Description": "start the channel upon creation",
      "Default": "<%= props.mediaLive.autoStart %>",
      "AllowedValues": [ "YES", "NO" ]
    },

    "pEndpoints": {
      "Type": "CommaDelimitedList",
      "Description": "output streaming standards. MediaPackage supports HLS, DASH, MSS, and/or CMAF",
      "Default": "<%= props.mediaPackage.endpoints %>",
      "AllowedValues": [
        "HLS", "HLS,DASH", "HLS,MSS", "HLS,DASH,MSS", "HLS,DASH,MSS,CMAF",
        "DASH", "DASH,MSS", "DASH,MSS,CMAF",
        "MSS", "MSS,CMAF",
        "CMAF"
      ]
    },

    "pStartOverWindow": {
      "Type": "Number",
      "Description": "specify catch-up TV window, max. 3 days (259200)",
      "Default": "<%= props.mediaPackage.startOverWindow %>",
      "MinValue": "60",
      "MaxValue": "259200"
    },

    "pSegmentPerPlaylist": {
      "Type": "Number",
      "Description": "specify number of segments per playlist/manifest, minimum 1 (recommended 3 and above)",
      "Default": "<%= props.shared.segsPerPlist %>",
      "MinValue": "1"
    },

    "pEnableMediaStore": {
      "Type": "String",
      "Description": "Caution: By enabling MediaStore, it clones the MediaLive output channels that will ingest to MediaStore origin.",
      "Default": "<%= props.mediaStore.enableMediaStore %>",
      "AllowedValues": [ "YES", "NO" ]
    },

    "pEnableDistribution": {
      "Type": "String",
      "Description": "",
      "Default": "<%= props.cloudFront.enableDistrubtion %>",
      "AllowedValues": [ "YES", "NO" ]
    },
    <% if (props.cloudFront.enableDistrubtion == "YES") { %>

    "pPriceClass": {
      "Type": "String",
      "Description": "see http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PriceClass.html for details",
      "AllowedValues": [ "PriceClass_100", "PriceClass_200", "PriceClass_All" ],
      "Default": "<%= props.cloudFront.priceClass %>"
    },
    <% }  else { %>

    "pPriceClass": {
      "Type": "String",
      "Description": "see http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PriceClass.html for details",
      "AllowedValues": [ "PriceClass_100", "PriceClass_200", "PriceClass_All" ],
      "Default": "PriceClass_100"
    },

    <% } %>
    "pS3CF": {
      "Type": "String",
      "Description": "specify where CloudFront will deliver access logs to. Leave it blank to use the same bucket of this workflow.",
      "Default": "<%= props.cloudFront.sBucketLogs %>"
    },

    "pS3PrefixCF": {
      "Type": "String",
      "Description": "specify the prefix (folder) where CloudFront will deliver access logs to. Leave it as is.",
      "Default": "<%= props.cloudFront.sLogPrefix %>"
    }
  },

  "Conditions": {
    "cS3CF": {
      "Fn::Not": [
        {
          "Fn::Equals": [ { "Ref": "pS3CF" }, "" ]
        }
      ]
    },

    "cEnableMediaStore": {
      "Fn::Equals": [ { "Ref": "pEnableMediaStore" }, "YES" ]
    },

    "cEnableDistribution": {
      "Fn::Equals": [ { "Ref": "pEnableDistribution" }, "YES" ]
    }
  },

  "Outputs": {
    "oMediaLiveChannelName": {
      "Value": { "Fn::GetAtt": [ "rML", "Outputs.oChannelName" ] },
      "Description": "MediaLive Channel Name"
    },

    "oMediaLiveChannelId": {
      "Value": { "Fn::GetAtt": [ "rML", "Outputs.oChannelId" ] },
      "Description": "MediaLive Channel Id"
    },

    "oMediaLivePrimaryIngestUrl": {
      "Value": { "Fn::GetAtt": [ "rML", "Outputs.oPrimaryIngestUrl" ] },
      "Description": "(P) MediaLive Ingest Url"
    },

    "oMediaLiveBackupIngestUrl": {
      "Value": { "Fn::GetAtt": [ "rML", "Outputs.oBackupIngestUrl" ] },
      "Description": "(B) MediaLive Ingest Url"
    },

    "oPrimaryHlsEgress": {
      "Value": {
        "Fn::If": [
          "cEnableDistribution",
          { "Fn::GetAtt": [ "rDistribution", "Outputs.oPrimaryHlsEndpoint" ] },
          { "Fn::GetAtt": [ "rMP", "Outputs.oHlsEndpoint" ] }
        ]
      },
      "Description": "(P) HLS Egress Url"
    },

    "oPrimaryDashEgress": {
      "Value": {
        "Fn::If": [
          "cEnableDistribution",
          { "Fn::GetAtt": [ "rDistribution", "Outputs.oPrimaryDashEndpoint" ] },
          { "Fn::GetAtt": [ "rMP", "Outputs.oDashEndpoint" ] }
        ]
      },
      "Description": "(P) DASH Egress Url"
    },

    "oPrimaryMssEgress": {
      "Value": {
        "Fn::If": [
          "cEnableDistribution",
          { "Fn::GetAtt": [ "rDistribution", "Outputs.oPrimaryMssEndpoint" ] },
          { "Fn::GetAtt": [ "rMP", "Outputs.oMssEndpoint" ] }
        ]
      },
      "Description": "(P) MSS Egress Url"
    },

    "oPrimaryCmafEgress": {
      "Value": {
        "Fn::If": [
          "cEnableDistribution",
          { "Fn::GetAtt": [ "rDistribution", "Outputs.oPrimaryCmafEndpoint" ] },
          { "Fn::GetAtt": [ "rMP", "Outputs.oCmafEndpoint" ] }
        ]
      },
      "Description": "(P) CMAF Egress Url"
    },

    "oMediaStoreContainerName": {
      "Condition": "cEnableMediaStore",
      "Value": { "Fn::GetAtt": [ "rMS", "Outputs.oContainerName" ] },
      "Description": "MediaStore Container Name"
    },

    "oMediaStoreContainerArn": {
      "Condition": "cEnableMediaStore",
      "Value": { "Fn::GetAtt": [ "rMS", "Outputs.oContainerArn" ] },
      "Description": "MediaStore Container Arn"
    },

    "oPrimaryMediaStoreEgressUrl": {
      "Condition": "cEnableMediaStore",
      "Value": { "Fn::GetAtt": [ "rML", "Outputs.oPrimaryMediaStoreEgressUrl" ] },
      "Description": "(P) MediaStore Egress Url"
    },

    "oBackupMediaStoreEgressUrl": {
      "Condition": "cEnableMediaStore",
      "Value": { "Fn::GetAtt": [ "rML", "Outputs.oBackupMediaStoreEgressUrl" ] },
      "Description": "(B) MediaStore Egress Url"
    },

    "oCloudFrontDistributionDomain": {
      "Condition": "cEnableDistribution",
      "Value": { "Fn::GetAtt": [ "rDistribution", "Outputs.oDistributionDomain" ] },
      "Description": "CloudFront Distribution Domain"
    },

    "oCloudFrontDistributionId": {
      "Condition": "cEnableDistribution",
      "Value": { "Fn::GetAtt": [ "rDistribution", "Outputs.oDistributionId" ] },
      "Description": "CloudFront Distribution Id"
    }
  }
}
